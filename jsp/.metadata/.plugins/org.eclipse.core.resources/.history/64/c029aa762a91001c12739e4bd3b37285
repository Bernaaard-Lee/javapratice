package sec03.brd08;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.RequestDispatcher;
import javax.servlet.Servlet;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.io.FileUtils;


// @WebServlet("/board/*")
public class BoardController extends HttpServlet {
	private static String ARTICLE_IMAGE_REPO = "C:\\board\\article_image";	// 첨부 이미지 저장 경로
	BoardService boardService;
	ArticleVO articleVO;

	public void init(ServletConfig config) throws ServletException {
		boardService = new BoardService();  								// 서블릿 초기화 시 boardService 객체 생성
		articleVO = new ArticleVO();
	}


	protected void doGet(HttpServletRequest request, HttpServletResponse response)  throws ServletException, IOException {
		doHandle(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doHandle(request, response);
	}

	private void doHandle(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String nextPage = "";												// nextPage 초기화
		request.setCharacterEncoding("utf-8");
		response.setContentType("text/html; charset=utf-8");
		HttpSession session;												// 세션 함수
		String action = request.getPathInfo();								// 요청값 action에 저장
		System.out.println("action:" + action);								// console창에 action 출력
		try {
			List<ArticleVO> articlesList = new ArrayList<ArticleVO>();		// 글목록 변수 선언
			if (action==null){												// 아무런 action이 없다면(최초 요청 시)
				String _section=request.getParameter("section");			// section 파라미터 값을 받음
				String _pageNum=request.getParameter("pageNum");			// pageNun 파라미터 값을 받음
				int section = Integer.parseInt(((_section==null)? "1":_section) );	// section 값이 없다면 1로
				int pageNum = Integer.parseInt(((_pageNum==null)? "1":_pageNum));	// pageNum 값이 없다면 1로
				Map<String, Integer> pagingMap = new HashMap<String, Integer>();
				pagingMap.put("section", section);							// section값과 pageNum값을 받아
				pagingMap.put("pageNum", pageNum);							// hashmap에 저장 --> pagingmap
				Map articlesMap=boardService.listArticles(pagingMap);		// pagingmap에 받은 값으로 페이지 번호와 섹션 조회
				articlesMap.put("section", section);						// 섹션 출력
				articlesMap.put("pageNum", pageNum);						// 페이지번호 출력
				request.setAttribute("articlesMap", articlesMap);			// articlesmap에 저장
				nextPage = "/board07/listArticles.jsp";						// listArticles로 전달
			
				}else if(action.equals("/listArticles.do")){  				// 글 목록 listAritcles.do 요청을 받으면
				String _section=request.getParameter("section");			// 섹션 파라미터 값을 받음
				String _pageNum=request.getParameter("pageNum");			// 페이지번호 파라미터 값을 받음
				int section = Integer.parseInt(((_section==null)? "1":_section) );	// section값이 없다면 1로
				int pageNum = Integer.parseInt(((_pageNum==null)? "1":_pageNum));	// 페이지번호 값이 없다면 1로
				Map pagingMap=new HashMap();								
				pagingMap.put("section", section);							// section 값과 pageNum 값을 받아
				pagingMap.put("pageNum", pageNum);
				Map articlesMap=boardService.listArticles(pagingMap);		// articlesmap에 저장
				articlesMap.put("section", section);						// section 출력
				articlesMap.put("pageNum", pageNum);						// pageNum 출력
				request.setAttribute("articlesMap", articlesMap);			// articlemap에 저장
				nextPage = "/board07/listArticles.jsp";						// listArticles로 전달
				
			} else if (action.equals("/articleForm.do")) {					// 글쓰기 형식 articleForm.do 요청을 받으면
				nextPage = "/board07/articleForm.jsp";						// 글쓰기 폼으로 전달
				
			} else if (action.equals("/addArticle.do")) {					// 글쓰기 추가 addArticle.do 요청을 받으면
				int articleNO = 0;											// 글번호 제일 앞으로
				Map<String, String> articleMap = upload(request, response);	// articleMap에 
				String title = articleMap.get("title");						// 제목, 내용 이미지 파일 받아 저장
				String content = articleMap.get("content");
				String imageFileName = articleMap.get("imageFileName");
				String notice_yn = articleMap.get("notice_yn");
				
				articleVO.setParentNO(0);									// 글번호 제일 앞으로 설정
				articleVO.setId("hong");									// 작성자는 hong으로 설정
				articleVO.setTitle(title);									// articleMap에 저장된 제목을 받아 설정
				articleVO.setContent(content);								// articleMap에 저장된 내용을 받아 설정
				articleVO.setImageFileName(imageFileName);					// articleMap에 저장된 이미지 파일을 받아 설정
				articleVO.setNotice_yn(notice_yn);					// articleMap에 저장된 이미지 파일을 받아 설정
				articleNO = boardService.addArticle(articleVO);
				if (imageFileName != null && imageFileName.length() != 0) {	// 이미지 파일이 있다면
					File srcFile = new File(ARTICLE_IMAGE_REPO + "\\" + "temp" + "\\" + imageFileName);	// 임시 폴더에 저장
					File destDir = new File(ARTICLE_IMAGE_REPO + "\\" + articleNO);	// 글번호 폴더 지정
					destDir.mkdirs();												// 글번호 폴더 생성
					FileUtils.moveFileToDirectory(srcFile, destDir, true);			// 임시 폴더와 폴더에 저장된 이미지 삭제
				}
				PrintWriter pw = response.getWriter();						// 스크립트 작성
				pw.print("<script>" + "  alert('새 글을 추가했습니다.');" + " location.href='" + request.getContextPath()
						+ "/board/listArticles.do';" + "</script>");		// 알림창으로 새 글 추가 통보
				return;
				
			} else if (action.equals("/viewArticle.do")) {					// 글보기 기능 viewArticle.do 요청을 받으면 
				String articleNO = request.getParameter("articleNO");		// 글번호 값 받아와서
				articleVO = boardService.viewArticle(Integer.parseInt(articleNO));	// articleVO에 저장
				request.setAttribute("article", articleVO);					// article에 articleVO값 설정
				nextPage = "/board07/viewArticle.jsp";						// viewArticle로 전송
				
			} else if (action.equals("/modArticle.do")) {					// 글 수정 기능 modArticle.do 요청을 받으면
				Map<String, String> articleMap = upload(request, response);	// articlemap에
				int articleNO = Integer.parseInt(articleMap.get("articleNO"));	// 글번호, 제목, 내용, 이미지파일을 저장
				articleVO.setArticleNO(articleNO);
				String title = articleMap.get("title");
				String content = articleMap.get("content");
				String imageFileName = articleMap.get("imageFileName");
				articleVO.setParentNO(0);									// 글번호는 최신
				articleVO.setId("hong");									// 작성자는 hong
				articleVO.setTitle(title);									// 제목 값 
				articleVO.setContent(content);								// 내용 값
				articleVO.setImageFileName(imageFileName);					// 첨부 이미지 파일 받아서
				boardService.modArticle(articleVO);							// boardService로
				if (imageFileName != null && imageFileName.length() != 0) {	// 이미지 파일이 있다면
					String originalFileName = articleMap.get("originalFileName");	// 새로 올리는 이미지 파일
					File srcFile = new File(ARTICLE_IMAGE_REPO + "\\" + "temp" + "\\" + imageFileName);	// 임시폴더에 이미지 저장
					File destDir = new File(ARTICLE_IMAGE_REPO + "\\" + articleNO);	// 글번호 폴더 지정
					destDir.mkdirs();												// 글번호 폴더 생성
					FileUtils.moveFileToDirectory(srcFile, destDir, true);			// 임시파일 삭제
					;
					File oldFile = new File(ARTICLE_IMAGE_REPO + "\\" + articleNO + "\\" + originalFileName);	// 글번호 폴더에 
					oldFile.delete();																	// 올라가 있던 이미지 파일 삭제
				}
				PrintWriter pw = response.getWriter();						// 스크립트 작성
				pw.print("<script>" + "  alert('글이 수정되었습니다.');" + " location.href='" + request.getContextPath()
						+ "/board/viewArticle.do?articleNO=" + articleNO + "';" + "</script>");	// 알림으로 수정 알려줌
				return;
				
			} else if (action.equals("/removeArticle.do")) {				// 글 삭제 기능 removeArticle.do 요청을 받으면
				int articleNO = Integer.parseInt(request.getParameter("articleNO"));	// 글번호를 받아
				List<Integer> articleNOList = boardService.removeArticle(articleNO);
				for (int _articleNO : articleNOList) {						// 글목록에서 글번호를 탐색
					File imgDir = new File(ARTICLE_IMAGE_REPO + "\\" + _articleNO);	// 글번호 폴더에
					if (imgDir.exists()) {											// 이미지 파일이 있다면
						FileUtils.deleteDirectory(imgDir);							// 삭제
					}
				}

				PrintWriter pw = response.getWriter();						// 스크립트 작성
				pw.print("<script>" + "  alert('글이 삭제되었습니다.');" + " location.href='" + request.getContextPath()
						+ "/board/listArticles.do';" + "</script>");		// 알림으로 글이 삭제된 것을 알려줌
				return;

			} else if (action.equals("/replyForm.do")) {							// 답글기능 replyForm.do를 요청받으면
				int parentNO = Integer.parseInt(request.getParameter("parentNO"));	// 부모글 파라미터를 인자로 받음
				session = request.getSession();										// 세션값을 받음
				session.setAttribute("parentNO", parentNO);							// prentNO에 세션값을 저장
				nextPage = "/board07/replyForm.jsp";								// replyForm으로 전달
				
			} else if (action.equals("/addReply.do")) {								// 답글추가 요청
				session = request.getSession();										// 세션 값을 받음
				int parentNO = (Integer) session.getAttribute("parentNO");			// 세션에 저장된 부모글 값을 받음
				session.removeAttribute("parentNO");								// 세션에 저장된 부모글 값을 삭제
				Map<String, String> articleMap = upload(request, response);			// 업로드 요청을 atriclemap에 저장
				String title = articleMap.get("title");								// 입력한 제목을 받음
				String content = articleMap.get("content");							// 입력한 내용을 받음
				String imageFileName = articleMap.get("imageFileName");				// 첨부한 이미지 파일을 받음
				articleVO.setParentNO(parentNO);									// 답글의 부모글 번호 지정
				articleVO.setId("lee");												// 답글 작성자 lee
				articleVO.setTitle(title);											// 입력한 답글의 제목
				articleVO.setContent(content);										// 입력한 답글의 내용
				articleVO.setImageFileName(imageFileName);							// 답글에 첨부한 이미지 파일
				int articleNO = boardService.addReply(articleVO);					// 답글의 글번호
				if (imageFileName != null && imageFileName.length() != 0) {			// 첨부한 이미지 파일이 있다면
					File srcFile = new File(ARTICLE_IMAGE_REPO + "\\" + "temp" + "\\" + imageFileName);	// 임시 폴더에 이미지 저장
					File destDir = new File(ARTICLE_IMAGE_REPO + "\\" + articleNO); // 글번호 폴더 지정
					destDir.mkdirs();												// 글번호 폴더 생성
					FileUtils.moveFileToDirectory(srcFile, destDir, true);			// 임시폴더 삭제
				}
				PrintWriter pw = response.getWriter();								// 스크립트 작성
				pw.print("<script>" + "  alert('답글이 작성되었습니다.');" + " location.href='" + request.getContextPath()
						+ "/board/viewArticle.do?articleNO="+articleNO+"';" + "</script>"); // 경고창으로 답글 작성 알림
				return;
			}

			RequestDispatcher dispatch = request.getRequestDispatcher(nextPage);	// nextPage로 포워딩 (dispatch 활용)
			dispatch.forward(request, response);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private Map<String, String> upload(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		Map<String, String> articleMap = new HashMap<String, String>();		
		String encoding = "utf-8";											// 형식은 utf-8로
		File currentDirPath = new File(ARTICLE_IMAGE_REPO);					// 파일을 기본 폴더에
		DiskFileItemFactory factory = new DiskFileItemFactory();			// 담아두는 기능
		factory.setRepository(currentDirPath);								// 현재위치에 저장소 만들기
		factory.setSizeThreshold(1024 * 1024);								// 최대 사이즈
		ServletFileUpload upload = new ServletFileUpload(factory);			// 업로드 함수
		try {
			List items = upload.parseRequest(request);						// 업로드를 요청받으면
			for (int i = 0; i < items.size(); i++) {
				FileItem fileItem = (FileItem) items.get(i);				// 아래로는 모르겠다
				if (fileItem.isFormField()) {
					System.out.println(fileItem.getFieldName() + "=" + fileItem.getString(encoding));
					articleMap.put(fileItem.getFieldName(), fileItem.getString(encoding));
				} else {
					System.out.println("파라미터명:" + fileItem.getFieldName());
					//System.out.println("파일명:" + fileItem.getName());
					System.out.println("파일크기:" + fileItem.getSize() + "bytes");
					//articleMap.put(fileItem.getFieldName(), fileItem.getName());
					if (fileItem.getSize() > 0) {
						int idx = fileItem.getName().lastIndexOf("\\");
						if (idx == -1) {
							idx = fileItem.getName().lastIndexOf("/");
						}

						String fileName = fileItem.getName().substring(idx + 1);
						System.out.println("파일명:" + fileName); 
								articleMap.put(fileItem.getFieldName(), fileName);  // 
						File uploadFile = new File(currentDirPath + "\\temp\\" + fileName);
						fileItem.write(uploadFile);

					} // end if
				} // end if
			} // end for
		} catch (Exception e) {
			e.printStackTrace();
		}
		return articleMap;
	}

}
